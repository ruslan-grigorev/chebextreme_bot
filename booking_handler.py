from aiogram import Bot
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import re
from datetime import datetime
from tinkoff_payment import init_payment
import logging


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class BookingStates(StatesGroup):
    waiting_for_full_name = State()
    waiting_for_phone = State()
    waiting_for_passport_series = State()
    waiting_for_passport_number = State()
    waiting_for_birth_date = State()
    confirming_booking = State()


# Callback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫
class BookingCallback(CallbackData, prefix="book"):
    action: str
    event_id: str = ""


class BookingHandler:
    def __init__(self, sheets_client):
        self.sheets_client = sheets_client

        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        self.events = {
            "yuryuzan_june": {
                "name": "–°–ø–ª–∞–≤ –ø–æ —Ä–µ–∫–µ –Æ—Ä—é–∑–∞–Ω—å",
                "dates": "11-15 –∏—é–Ω—è",
                "location": "–£—Ä–∞–ª",
                "price_early": 18500,
                "price_regular": 19500,
                "early_deadline": "2 –∏—é–Ω—è",
                "description": "–í–∫–ª—é—á–µ–Ω–æ: —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä, –ø–∏—Ç–∞–Ω–∏–µ, –ø—Ä–æ–∫–∞—Ç –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è, –ø–æ—Ö–æ–¥–Ω–∞—è –±–∞–Ω—è, –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä"
            }
        }

    def get_events_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for event_id, event in self.events.items():
            button = InlineKeyboardButton(
                text=f"üèïÔ∏è {event['name']} ({event['dates']})",
                callback_data=BookingCallback(action="select", event_id=event_id).pack()
            )
            keyboard.inline_keyboard.append([button])

        return keyboard

    def get_confirmation_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å",
                    callback_data=BookingCallback(action="confirm").pack()
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                    callback_data=BookingCallback(action="cancel").pack()
                )
            ]
        ])
        return keyboard

    async def start_booking(self, message: Message, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        text = """
üéØ **–ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô**

–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:
"""
        keyboard = self.get_events_keyboard()
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

    async def handle_event_selection(self, callback: CallbackQuery, callback_data: BookingCallback, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        event_id = callback_data.event_id
        event = self.events.get(event_id)

        if not event:
            await callback.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(selected_event=event_id)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É
        current_date = datetime.now()
        deadline = datetime.strptime("2024-06-02", "%Y-%m-%d")  # –£—Å–ª–æ–≤–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        price = event['price_early'] if current_date < deadline else event['price_regular']

        text = f"""
üèïÔ∏è **{event['name']}**
üìÖ {event['dates']} ‚Ä¢ üìç {event['location']}

üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {price:,} ‚ÇΩ
{f"‚è∞ –î–æ {event['early_deadline']} ‚Äî {event['price_early']:,} ‚ÇΩ" if current_date < deadline else ""}

üìã **–í–∫–ª—é—á–µ–Ω–æ:**
{event['description']}

üìù **–° —Å–æ–±–æ–π –≤–∑—è—Ç—å:**
‚Ä¢ –õ–∏—á–Ω–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
‚Ä¢ –°–ø–∞–ª—å–Ω–∏–∫ –∏ –∫–æ–≤—Ä–∏–∫  
‚Ä¢ –õ–∏—á–Ω—ã–µ –≤–µ—â–∏

---
**–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–Ω–µ –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**
‚Ä¢ –§–ò–û
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω
‚Ä¢ –ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è

–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º? üëá
"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                callback_data=BookingCallback(action="start_form").pack()
            )],
            [InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data=BookingCallback(action="back").pack()
            )]
        ])

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()

    async def start_form(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        await callback.message.edit_text(
            "üìù **–®–∞–≥ 1/4: –§–ò–û**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):",
            parse_mode="Markdown"
        )
        await state.set_state(BookingStates.waiting_for_full_name)
        await callback.answer()

    async def process_full_name(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û"""
        full_name = message.text.strip()

        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if len(full_name.split()) < 2:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º –§–∞–º–∏–ª–∏—è –ò–º—è):"
            )
            return

        await state.update_data(full_name=full_name)

        await message.answer(
            "üìû **–®–∞–≥ 2/4: –¢–µ–ª–µ—Ñ–æ–Ω**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:",
            parse_mode="Markdown"
        )
        await state.set_state(BookingStates.waiting_for_phone)

    async def process_phone(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        phone = message.text.strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_pattern = r'^(\+7|8)?[0-9]{10}$'
        clean_phone = re.sub(r'[^\d+]', '', phone)

        if not re.match(phone_pattern, clean_phone):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX:"
            )
            return

        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        if clean_phone.startswith('8'):
            clean_phone = '+7' + clean_phone[1:]
        elif not clean_phone.startswith('+7'):
            clean_phone = '+7' + clean_phone

        await state.update_data(phone=clean_phone)

        await message.answer(
            "üìÑ **–®–∞–≥ 3/4: –ü–∞—Å–ø–æ—Ä—Ç (—Å–µ—Ä–∏—è)**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏—é –ø–∞—Å–ø–æ—Ä—Ç–∞ (4 —Ü–∏—Ñ—Ä—ã):",
            parse_mode="Markdown"
        )
        await state.set_state(BookingStates.waiting_for_passport_series)

    async def process_passport_series(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–∏–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞"""
        series = message.text.strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Ä–∏–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞
        if not re.match(r'^\d{4}$', series):
            await message.answer(
                "‚ùå –°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 4 —Ü–∏—Ñ—Ä—ã:"
            )
            return

        await state.update_data(passport_series=series)

        await message.answer(
            "üìÑ **–®–∞–≥ 3/4: –ü–∞—Å–ø–æ—Ä—Ç (–Ω–æ–º–µ—Ä)**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ (6 —Ü–∏—Ñ—Ä):",
            parse_mode="Markdown"
        )
        await state.set_state(BookingStates.waiting_for_passport_number)

    async def process_passport_number(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞"""
        number = message.text.strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞
        if not re.match(r'^\d{6}$', number):
            await message.answer(
                "‚ùå –ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Ü–∏—Ñ—Ä:"
            )
            return

        await state.update_data(passport_number=number)

        await message.answer(
            "üìÖ **–®–∞–≥ 4/4: –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
            parse_mode="Markdown"
        )
        await state.set_state(BookingStates.waiting_for_birth_date)

    async def process_birth_date(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
        birth_date = message.text.strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
        try:
            datetime.strptime(birth_date, "%d.%m.%Y")
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.05.1990):"
            )
            return

        await state.update_data(birth_date=birth_date)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await self.show_booking_summary(message, state)

    async def show_booking_summary(self, message: Message, state: FSMContext):
        """–ü–æ–∫–∞–∑ —Å–≤–æ–¥–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        data = await state.get_data()
        event = self.events[data['selected_event']]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É
        current_date = datetime.now()
        deadline = datetime.strptime("2024-06-02", "%Y-%m-%d")
        price = event['price_early'] if current_date < deadline else event['price_regular']

        summary = f"""
‚úÖ **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø**

üèïÔ∏è **–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:** {event['name']}
üìÖ **–î–∞—Ç—ã:** {event['dates']}
üìç **–ú–µ—Å—Ç–æ:** {event['location']}
üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {price:,} ‚ÇΩ

üë§ **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**
‚Ä¢ **–§–ò–û:** {data['full_name']}
‚Ä¢ **–¢–µ–ª–µ—Ñ–æ–Ω:** {data['phone']}
‚Ä¢ **–ü–∞—Å–ø–æ—Ä—Ç:** {data['passport_series']} {data['passport_number']}
‚Ä¢ **–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:** {data['birth_date']}

---
**–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ?**
–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã –¢–∏–Ω—å–∫–æ—Ñ—Ñ.
"""

        await state.update_data(price=price, event_name=event['name'])
        await state.set_state(BookingStates.confirming_booking)

        keyboard = self.get_confirmation_keyboard()
        await message.answer(summary, reply_markup=keyboard, parse_mode="Markdown")

    async def confirm_booking(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            data = await state.get_data()
            user = callback.from_user

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Google Sheets
            booking_data = {
                'telegram_id': user.id,
                'username': user.username or '',
                'full_name': data['full_name'],
                'phone': data['phone'],
                'passport_series': data['passport_series'],
                'passport_number': data['passport_number'],
                'birth_date': data['birth_date'],
                'event_name': data['event_name'],
                'price': data['price'],
                'payment_status': '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
                'booking_date': datetime.now().strftime("%d.%m.%Y %H:%M"),
                'notes': f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
            success = self.sheets_client.add_booking(booking_data)

            if not success:
                await callback.message.edit_text(
                    "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è**\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n"
                    "üì± @chebextreme –∏–ª–∏ +7 927 669 19 52",
                    parse_mode="Markdown"
                )
                await callback.answer()
                return

            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ
            try:
                payment_url = init_payment(
                    amount=data['price'],
                    description=f"{data['event_name']} - {data['full_name']}",
                    customer_id=str(user.id)
                )

                await callback.message.edit_text(
                    f"""
üéâ **–ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –ü–†–ò–ù–Ø–¢–û!**

‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
üìã –ù–æ–º–µ—Ä: #{user.id}{int(datetime.now().timestamp()) % 10000}

üí≥ **–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –æ–ø–ª–∞—Ç–µ:**

üîó [–û–ü–õ–ê–¢–ò–¢–¨ {data['price']:,} ‚ÇΩ]({payment_url})

‚è∞ **–í–∞–∂–Ω–æ:**
‚Ä¢ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 15 –º–∏–Ω—É—Ç
‚Ä¢ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —á–µ–∫ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω

üìû **–í–æ–ø—Ä–æ—Å—ã:** @chebextreme –∏–ª–∏ +7 927 669 19 52

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä ChebEXTREME! üèïÔ∏è
""",
                    parse_mode="Markdown",
                    disable_web_page_preview=False
                )

            except Exception as payment_error:
                logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {payment_error}")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Google Sheets
                self.sheets_client.update_booking_status(user.id, "–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã")

                await callback.message.edit_text(
                    f"""
‚ùå **–û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ü–õ–ê–¢–ï–ñ–ê**

–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π.

üìã **–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:** #{user.id}{int(datetime.now().timestamp()) % 10000}

üìû **–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞–º:**
‚Ä¢ Telegram: @chebextreme
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 927 669 19 52

–ú—ã –ø–æ–º–æ–∂–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø–ª–∞—Ç—É –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º.
""",
                    parse_mode="Markdown"
                )

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            await callback.message.edit_text(
                "‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞**\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n"
                "üì± @chebextreme –∏–ª–∏ +7 927 669 19 52",
                parse_mode="Markdown"
            )

        await state.clear()
        await callback.answer()

    async def cancel_booking(self, callback: CallbackQuery, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        await callback.message.edit_text(
            "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
            "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /booking"
        )
        await state.clear()
        await callback.answer()