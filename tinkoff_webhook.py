from flask import Flask, request, jsonify
import hashlib
import logging
import os
from typing import Dict, Any
import asyncio
from aiogram import Bot
from datetime import datetime
from tinkoff_payment import get_payment_info
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TINKOFF_SECRET_KEY = os.getenv("TINKOFF_SECRET_KEY")
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
WEBHOOK_HOST = os.getenv('WEBHOOK_HOST', '0.0.0.0')
WEBHOOK_PORT = int(os.getenv('WEBHOOK_PORT', 5001))

app = Flask(__name__)
bot = Bot(token=TELEGRAM_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
payment_info = {}

def save_payment_info(order_id: str, chat_id: int, amount: int):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ"""
    payment_info[order_id] = {
        'chat_id': chat_id,
        'amount': amount,
        'created_at': datetime.now().isoformat()
    }

def get_payment_info(order_id: str) -> Dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ"""
    return payment_info.get(order_id, {})

def verify_signature(data: Dict[str, Any], secret_key: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook'–∞ –æ—Ç Tinkoff"""
    if 'Token' not in data:
        return False

    received_token = data.pop('Token')

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    sorted_items = sorted(data.items())
    token_str = "".join(str(value) for key, value in sorted_items if key != "Token")
    token_str += secret_key

    calculated_token = hashlib.sha256(token_str.encode('utf-8')).hexdigest()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º Token –æ–±—Ä–∞—Ç–Ω–æ –≤ –¥–∞–Ω–Ω—ã–µ
    data['Token'] = received_token

    return calculated_token == received_token

async def handle_payment_notification(payment_data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ"""
    try:
        status = payment_data.get('Status')
        payment_id = payment_data.get('PaymentId')
        order_id = payment_data.get('OrderId')
        amount = payment_data.get('Amount', 0) // 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä—É–±–ª–∏

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ {payment_id}, —Å—Ç–∞—Ç—É—Å: {status}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        payment_info = get_payment_info(order_id)
        chat_id = payment_info.get('chat_id')
        
        if not chat_id:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω chat_id –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
            return

        if status == 'CONFIRMED':
            # –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
            await send_payment_success_notification(payment_data, chat_id)
            
        elif status == 'REJECTED':
            # –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω
            await send_payment_failed_notification(payment_data, chat_id)
            
        elif status == 'AUTHORIZED':
            # –ü–ª–∞—Ç–µ–∂ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
            await send_payment_authorized_notification(payment_data, chat_id)
            
        elif status == 'REFUNDED':
            # –ü–ª–∞—Ç–µ–∂ –≤–æ–∑–≤—Ä–∞—â–µ–Ω
            await send_payment_refunded_notification(payment_data, chat_id)
            
        elif status == 'REVERSED':
            # –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω
            await send_payment_reversed_notification(payment_data, chat_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ: {e}")

async def send_payment_success_notification(payment_data: Dict[str, Any], chat_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ"""
    try:
        order_id = payment_data.get('OrderId')
        amount = payment_data.get('Amount', 0) // 100

        message = f"""
üéâ *–û–ü–õ–ê–¢–ê –ü–†–û–®–õ–ê –£–°–ü–ï–®–ù–û!*

‚úÖ –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ
üí∞ –°—É–º–º–∞: {amount:,} ‚ÇΩ
üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}

üìû *–ß—Ç–æ –¥–∞–ª—å—à–µ:*
‚Ä¢ –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –ø–æ–¥—Ä–æ–±–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
‚Ä¢ –ó–∞ –¥–µ–Ω—å –¥–æ –Ω–∞—á–∞–ª–∞ –º—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º –æ –≤—Å—Ç—Ä–µ—á–µ
‚Ä¢ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        await bot.send_message(chat_id=chat_id, text=message, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ: {e}")

async def send_payment_failed_notification(payment_data: Dict[str, Any], chat_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç–µ"""
    try:
        order_id = payment_data.get('OrderId')
        amount = payment_data.get('Amount', 0) // 100

        message = f"""
‚ùå *–û–ü–õ–ê–¢–ê –û–¢–ö–õ–û–ù–ï–ù–ê!*
üí∞ –°—É–º–º–∞: {amount:,} ‚ÇΩ
üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
        """
        await bot.send_message(chat_id=chat_id, text=message, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç–µ: {e}")

async def send_payment_authorized_notification(payment_data: Dict[str, Any], chat_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        order_id = payment_data.get('OrderId')
        amount = payment_data.get('Amount', 0) // 100

        message = f"""
‚è≥ *–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è*
üí∞ –°—É–º–º–∞: {amount:,} ‚ÇΩ
üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}

–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.
        """
        await bot.send_message(chat_id=chat_id, text=message, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")

async def send_payment_refunded_notification(payment_data: Dict[str, Any], chat_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        order_id = payment_data.get('OrderId')
        amount = payment_data.get('Amount', 0) // 100

        message = f"""
üí´ *–í–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω*
üí∞ –°—É–º–º–∞: {amount:,} ‚ÇΩ
üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}

–°—Ä–µ–¥—Å—Ç–≤–∞ —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ –≤–∞—à —Å—á–µ—Ç.
        """
        await bot.send_message(chat_id=chat_id, text=message, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")

async def send_payment_reversed_notification(payment_data: Dict[str, Any], chat_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        order_id = payment_data.get('OrderId')
        amount = payment_data.get('Amount', 0) // 100

        message = f"""
üîÑ *–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω*
üí∞ –°—É–º–º–∞: {amount:,} ‚ÇΩ
üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
        """
        await bot.send_message(chat_id=chat_id, text=message, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")

@app.route('/tinkoff_webhook', methods=['POST'])
def tinkoff_webhook():
    """Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç Tinkoff"""
    data = request.json

    if not data:
        return jsonify({"error": "No data provided"}), 400

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    if not verify_signature(data, TINKOFF_SECRET_KEY):
        logger.warning("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook'–∞")
        return jsonify({"error": "Invalid signature"}), 400

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ
    asyncio.run(handle_payment_notification(data))

    return jsonify({"status": "success"}), 200

@app.route('/')
def index():
    """–ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞"""
    return "Tinkoff Webhook Server is running!"

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    app.run(host=WEBHOOK_HOST, port=WEBHOOK_PORT)





