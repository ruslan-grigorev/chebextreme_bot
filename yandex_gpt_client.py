import aiohttp
import asyncio
import json
import logging
from typing import Optional


class YandexGPTClient:
    def __init__(self, api_key: str, folder_id: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ YandexGPT
        api_key: API –∫–ª—é—á Yandex Cloud
        folder_id: ID –ø–∞–ø–∫–∏ –≤ Yandex Cloud
        """
        self.api_key = api_key
        self.folder_id = folder_id
        self.session = None
        self.base_url = "https://llm.api.cloud.yandex.net/foundationModels/v1"

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏"""
        self.session = aiohttp.ClientSession()
        logging.info("‚úÖ YandexGPT –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def get_response(self, prompt: str, max_retries: int = 3) -> Optional[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç YandexGPT
        prompt: —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        max_retries: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.session:
            logging.error("‚ùå YandexGPT –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None

        url = f"{self.base_url}/completion"
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Api-Key {self.api_key}"
        }

        payload = {
            "modelUri": f"gpt://{self.folder_id}/yandexgpt-lite",
            "completionOptions": {
                "stream": False,
                "temperature": 0.7,
                "maxTokens": 1000
            },
            "messages": [
                {
                    "role": "user",
                    "text": prompt
                }
            ]
        }

        for attempt in range(max_retries):
            try:
                logging.info(f"ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ YandexGPT (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")

                async with self.session.post(url, headers=headers, json=payload, timeout=30) as response:
                    if response.status == 200:
                        result = await response.json()

                        if "result" in result and "alternatives" in result["result"]:
                            alternatives = result["result"]["alternatives"]
                            if alternatives and len(alternatives) > 0:
                                content = alternatives[0]["message"]["text"]
                                logging.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç YandexGPT")
                                return content.strip()

                        logging.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç YandexGPT")
                        return None

                    elif response.status == 401:
                        logging.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ YandexGPT. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á")
                        return None

                    elif response.status == 403:
                        logging.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ YandexGPT. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ folder_id –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
                        return None

                    else:
                        error_text = await response.text()
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ YandexGPT API: {response.status} - {error_text}")

                        if attempt < max_retries - 1:
                            await asyncio.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                            continue

                        return None

            except asyncio.TimeoutError:
                logging.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                if attempt < max_retries - 1:
                    await asyncio.sleep(2)
                    continue
                return None

            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ YandexGPT: {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(2)
                    continue
                return None

        logging.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
        return None

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()
            logging.info("üîê –°–µ—Å—Å–∏—è YandexGPT –∑–∞–∫—Ä—ã—Ç–∞")